# ワークフロー概要:
# ===================================================
# このワークフローは手動で実行され、セマンティックバージョンの入力を求めます。
# その後、指定されたバージョンでGitタグを作成し、Dockerイメージをビルドして
# 本番環境にデプロイします。
# ===================================================

name: Backend Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'セマンティックバージョン (例: v1.2.3)'
        required: true
        type: string
        default: 'v0.0.0'

permissions:
  contents: write
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # バージョン検証
      - name: Validate version
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "エラー: バージョンはセマンティックバージョン形式 (vX.Y.Z) に従ってください"
            exit 1
          fi
          echo "バージョン検証成功: ${{ github.event.inputs.version }}"
          
      # Gitタグを作成してプッシュ
      - name: Create and push Git tag
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      # AWS認証
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # ECRログイン
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ECRリポジトリURIの設定
      - name: Set ECR repository URI
        run: |
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      # Dockerイメージ作成
      - name: Build and push Docker image
        working-directory: backend
        run: |
          echo "Building Docker image with tag: $IMAGE_TAG"
          echo "Using repository: $ECR_REPOSITORY"
          docker build \
            -f Dockerfile.prod \
            --build-arg DEFAULT_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            -t $ECR_REPOSITORY_URI:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY_URI:$IMAGE_TAG $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
          docker push $ECR_REPOSITORY_URI:latest
          echo "Image pushed to ECR: $ECR_REPOSITORY_URI:$IMAGE_TAG"

      # Terraformセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Terraform初期化
      - name: Terraform Init
        run: |
          cd infrastructure/environments/prod
          terraform init

      # Terraform変数ファイル作成
      - name: Create Terraform Variables File
        run: |
          cat > infrastructure/environments/prod/deploy.auto.tfvars << EOF
          backend_version = "${{ env.IMAGE_TAG }}"
          backend_allowed_hosts = "${{ secrets.ALLOWED_HOSTS }}"
          EOF

      # Terraformでバックエンドデプロイ
      - name: Deploy Backend with Terraform
        run: |
          cd infrastructure/environments/prod
          terraform apply -auto-approve

      # デプロイ完了通知
      - name: Deployment notification
        run: |
          echo "::notice::🚀 デプロイが完了しました！バージョン: $IMAGE_TAG, 環境: 本番環境" 