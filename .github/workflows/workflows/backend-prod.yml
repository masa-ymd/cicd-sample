# バックエンド本番環境用のCICD処理を定義します
# このワークフローは本番環境（production）向けのバックエンドアプリケーションのビルド、テスト、デプロイを自動化します
name: Backend Production Workflow

# ワークフローのトリガー条件を定義
# 本番環境へのデプロイは手動実行のみ許可（セマンティックバージョニングを強制）
on:
  # 手動実行時のトリガー（バージョン番号入力が必要）
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (semantic versioning: vX.Y.Z)'
        required: true
        type: string

# 必要な権限を定義
permissions:
  contents: write         # リポジトリコンテンツの読み取りと書き込み権限（タグ作成に必要）
  id-token: write         # OIDC認証用のトークン生成権限
  pull-requests: read     # PRへのコメント権限

# 環境変数の設定
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}               # AWSリージョン
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_PROD }}  # 本番環境用ECRリポジトリ名

jobs:
  # セマンティックバージョンの検証ジョブ
  validate-version:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 完全な履歴を取得

      # ステップ2: 入力されたバージョン番号がセマンティックバージョニング形式(vX.Y.Z)に従っているか検証
      - name: Validate semantic version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Validating version: $VERSION"
          
          if ! [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow semantic versioning format (vX.Y.Z)"
            exit 1
          fi
          
          echo "Version format is valid."

      # ステップ3: AWS認証情報の設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # ステップ4: バージョンの重複チェック
      - name: Check if version already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          echo "Checking if backend version $VERSION already exists in ECR..."
          # ECRでタグが存在するか確認
          if aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=$VERSION 2>/dev/null; then
            echo "Error: Version $VERSION already exists in ECR repository"
            exit 1
          fi
          
          # GitHubタグが既に存在するか確認
          if git tag | grep -q "^${VERSION}$"; then
            echo "Error: Git tag $VERSION already exists in the repository"
            exit 1
          fi
          
          echo "Version $VERSION is available for use."
      
      # ステップ5: バージョンの妥当性検証（過去のリリースと比較）
      - name: Verify version is greater than previous
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # vX.Y.Z形式から数値を抽出
          MAJOR=$(echo $VERSION | sed -E 's/v([0-9]+)\.[0-9]+\.[0-9]+/\1/')
          MINOR=$(echo $VERSION | sed -E 's/v[0-9]+\.([0-9]+)\.[0-9]+/\1/')
          PATCH=$(echo $VERSION | sed -E 's/v[0-9]+\.[0-9]+\.([0-9]+)/\1/')
          
          echo "Version components: Major=$MAJOR, Minor=$MINOR, Patch=$PATCH"
          
          # ECRから最新のタグを取得し、セマンティックバージョンのみをフィルタリング
          LATEST_VERSION=$(aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[*]' --output text | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || echo "v0.0.0")
          
          if [ "$LATEST_VERSION" == "v0.0.0" ]; then
            echo "No previous version found. This will be the first release."
          else
            echo "Latest version: $LATEST_VERSION"
            
            # 最新バージョンの数値を抽出
            LATEST_MAJOR=$(echo $LATEST_VERSION | sed -E 's/v([0-9]+)\.[0-9]+\.[0-9]+/\1/')
            LATEST_MINOR=$(echo $LATEST_VERSION | sed -E 's/v[0-9]+\.([0-9]+)\.[0-9]+/\1/')
            LATEST_PATCH=$(echo $LATEST_VERSION | sed -E 's/v[0-9]+\.[0-9]+\.([0-9]+)/\1/')
            
            # バージョン比較
            if [ $MAJOR -lt $LATEST_MAJOR ] || 
               ([ $MAJOR -eq $LATEST_MAJOR ] && [ $MINOR -lt $LATEST_MINOR ]) || 
               ([ $MAJOR -eq $LATEST_MAJOR ] && [ $MINOR -eq $LATEST_MINOR ] && [ $PATCH -le $LATEST_PATCH ]); then
              echo "Error: Version $VERSION is not greater than latest version $LATEST_VERSION"
              exit 1
            fi
          fi
          
          echo "Version validation successful: $VERSION is newer than existing versions."

  # GitHubタグ作成ジョブ: validate-versionジョブが成功したら、GitHubリポジトリにタグを作成します
  create-tag:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 完全な履歴を取得
      
      # ステップ2: Gitユーザー設定
      - name: Setup git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      # ステップ3: タグの作成とプッシュ
      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          ANNOTATION="Backend release $VERSION - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          echo "Creating annotated tag $VERSION with message: $ANNOTATION"
          git tag -a "$VERSION" -m "$ANNOTATION"
          git push origin "$VERSION"
          
          echo "Successfully created and pushed tag $VERSION"

  # テストとビルドジョブ: バックエンドアプリケーションのテスト実行とDockerイメージのビルド＆ECRへのプッシュを行います
  test-and-build:
    runs-on: ubuntu-latest
    needs: create-tag
    environment: production   # GitHub Environmentで設定した「production」環境を使用
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}  # 後続ジョブで利用するイメージタグを出力

    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # ステップ2: Rubyの実行環境をセットアップ
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'              # Rubyのバージョン指定
          bundler-cache: true              # Bundlerのキャッシュを有効化（高速化）
          working-directory: 'backend'     # 作業ディレクトリを指定

      # ステップ3: Railsアプリケーションのテスト実行
      - name: Run tests
        working-directory: backend
        run: |
          bundle exec rspec

      # ステップ4: AWS認証情報の設定（ECRへのアクセスに必要）
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ステップ5: Amazon ECRへのログイン
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ステップ6: Dockerイメージのタグを設定
      - name: Set image tag
        id: image-tag
        run: |
          # 指定されたバージョンをタグとして使用
          TAG="${{ github.event.inputs.version }}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT                  # タグを出力変数に設定
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV  # ECRリポジトリURIを環境変数に設定

      # ステップ7: Dockerイメージのビルドとプッシュ
      - name: Build and push Docker image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .    # イメージをビルド
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG          # ECRにプッシュ
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # デプロイジョブ: ビルドしたDockerイメージを本番環境のECSにデプロイします
  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build   # test-and-buildジョブの完了後に実行
    environment: production   # GitHub Environmentで設定した「production」環境を使用

    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v3

      # ステップ2: AWS認証情報の設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ステップ3: Amazon ECRへのログイン
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # ステップ4: デプロイに必要な環境変数を設定
      - name: Set environment variables
        run: |
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.test-and-build.outputs.image-tag }}" >> $GITHUB_ENV

      # ステップ5: 現在のECSタスク定義を取得
      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition cicd-sample-task-prod \
            --query "taskDefinition" \
            --output json > task-definition.json

      # ステップ6: タスク定義を新しいイメージで更新
      - name: Update task definition with new image
        run: |
          # jqを使用してタスク定義のコンテナイメージとアプリバージョン環境変数を更新
          jq --arg IMAGE "$ECR_REPOSITORY_URI:$IMAGE_TAG" \
             --arg VERSION "$IMAGE_TAG" \
             '.containerDefinitions[0].image = $IMAGE | .containerDefinitions[0].environment += [{"name": "APP_VERSION", "value": $VERSION}]' \
             task-definition.json > new-task-definition.json
          
          # 更新したタスク定義を登録
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          
          echo "New task definition registered: $NEW_TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      # ステップ7: ECSサービスを更新して新しいタスク定義をデプロイ
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster cicd-sample-cluster-prod \
            --service cicd-sample-service-prod \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment

      # ステップ8: デプロイの完了を待機
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster cicd-sample-cluster-prod \
            --services cicd-sample-service-prod
            
      # ステップ9: デプロイ完了通知
      - name: Deployment completed
        run: |
          echo "🚀 Backend version ${{ env.IMAGE_TAG }} has been successfully deployed to production environment." 