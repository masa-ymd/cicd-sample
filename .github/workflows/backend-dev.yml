name: Backend Development Workflow

on:
  push:
    branches:
      - develop
      - '!production'
    paths:
      - 'backend/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  # テストとビルドジョブ
  test-and-build:
    runs-on: ubuntu-latest
    # developブランチへのプッシュ時のみ実行
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Rubyセットアップ
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.4'
          working-directory: 'backend'
        
      # Add platform to Gemfile.lock
      - name: Add platform to Gemfile.lock
        working-directory: backend
        run: |
          bundle lock --add-platform x86_64-linux

      # Install dependencies
      - name: Install dependencies
        working-directory: backend
        run: |
          bundle install --jobs 4

      # テスト実行
      - name: Run tests
        working-directory: backend
        run: |
          bundle exec rspec

      # AWS認証情報の設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECRへのログイン
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # イメージタグの設定（<git-hash>-dev形式）
      - name: Set image tag
        id: image-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAG="${SHORT_SHA}-dev"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV

      # Dockerイメージのビルドとプッシュ
      - name: Build and push Docker image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          docker build \
            --build-arg DEFAULT_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # PRにビルド情報をコメント
      - name: Comment on PR with build info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Backend image built and pushed to ECR.\nCommit: ' + context.sha + '\nImage tag: ${{ steps.image-tag.outputs.tag }}'
            })

  # デプロイジョブ（Terraformを使用）
  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "IMAGE_TAG=${{ needs.test-and-build.outputs.image-tag }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: |
          cd infrastructure/environments/dev
          terraform init

      - name: Create Terraform Variables File
        run: |
          cat > infrastructure/environments/dev/deploy.auto.tfvars << EOF
          backend_version = "${{ env.IMAGE_TAG }}"
          backend_allowed_hosts = "${{ secrets.ALLOWED_HOSTS }}"
          EOF

      - name: Deploy Backend with Terraform
        run: |
          cd infrastructure/environments/dev
          terraform apply -auto-approve

      - name: Comment on PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Backend deployed to development environment.\nCommit: ' + context.sha + '\nImage tag: ${{ env.IMAGE_TAG }}\nAPI URL: ${{ secrets.API_URL }}'
            }) 