# ワークフロー概要:
# ===================================================
# このファイルには2つのワークフローが含まれています：
#
# 1. Backend Production Workflow:
#    - プッシュやPRで自動的に実行される
#    - テストとビルドのみを行う
#    - ビルドされたイメージは一時的な<commit-hash>-buildタグで保存
#    - デプロイを実行するには手動ワークフローを実行するように案内メッセージを表示
#
# 2. Backend Production Deploy:
#    - 常に手動実行（workflow_dispatch）のみ
#    - 必ずセマンティックバージョン入力が必要
#    - 2つのオプション：
#      - 既存ビルドを使用（build_tagパラメータで指定）
#      - 新規ビルド（build_tagを空にする）
#    - バージョン番号のバリデーションを実施
#    - 本番環境へのデプロイを実行
#
# この設計により、本番環境へのデプロイは必ずバージョン番号を指定して実行されるようになり、
# PRやブランチへのプッシュでビルドとテストは自動的に実行されるため、CIの恩恵も維持できます。
# ===================================================

name: Backend Production Workflow

on:
  push:
    branches:
      - production
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - production
    paths:
      - 'backend/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1.4'
          working-directory: 'backend'

      - name: Add platform to Gemfile.lock
        working-directory: backend
        run: |
          bundle lock --add-platform x86_64-linux

      # Install dependencies
      - name: Install dependencies
        working-directory: backend
        run: |
          bundle install --jobs 4

      - name: Run tests
        working-directory: backend
        run: |
          bundle exec rspec

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set image tag
        id: image-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAG="${SHORT_SHA}-build"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV

      - name: Build and push Docker image
        working-directory: backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          docker build \
            -f Dockerfile.prod \
            --build-arg DEFAULT_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Comment on PR with build info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Backend image built and pushed to ECR.\nCommit: ' + context.sha + '\nImage tag: ${{ steps.image-tag.outputs.tag }}\n\n**デプロイするには**: "Backend Production Deploy" ワークフローを手動で実行し、セマンティックバージョンを入力してください。'
            })

---
name: Backend Production Deploy

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (semantic versioning: vX.Y.Z)'
        required: true
        type: string
      build_tag:
        description: 'ビルドタグ (例: 1a2b3c4-build)、空の場合は最新ビルドから新しくビルドします'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    steps:
      - name: Validate semantic version
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow semantic versioning format (vX.Y.Z)"
            exit 1
          fi
          echo "Version validated: ${{ github.event.inputs.version }}"
  
  build-if-needed:
    runs-on: ubuntu-latest
    needs: validate-version
    environment: production
    outputs:
      image-tag: ${{ steps.set-image.outputs.final_tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.build_tag == '' }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set image tags
        id: set-image
        run: |
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          
          if [ -n "${{ github.event.inputs.build_tag }}" ]; then
            # 既存ビルドタグを使用
            echo "Using existing build: ${{ github.event.inputs.build_tag }}"
            echo "SOURCE_TAG=${{ github.event.inputs.build_tag }}" >> $GITHUB_ENV
            echo "final_tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # 新規ビルド
            echo "Building new image with version: ${{ github.event.inputs.version }}"
            echo "SOURCE_TAG=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "final_tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push new image if needed
        if: ${{ github.event.inputs.build_tag == '' }}
        working-directory: backend
        run: |
          docker build \
            -f Dockerfile.prod \
            --build-arg DEFAULT_ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} \
            -t $ECR_REPOSITORY_URI:${{ github.event.inputs.version }} .
          docker push $ECR_REPOSITORY_URI:${{ github.event.inputs.version }}
          echo "Image built and pushed: $ECR_REPOSITORY_URI:${{ github.event.inputs.version }}"
      
      - name: Tag existing image if specified
        if: ${{ github.event.inputs.build_tag != '' }}
        run: |
          # 既存イメージをプル
          docker pull $ECR_REPOSITORY_URI:$SOURCE_TAG
          
          # バージョンタグで再タグ付け
          docker tag $ECR_REPOSITORY_URI:$SOURCE_TAG $ECR_REPOSITORY_URI:${{ github.event.inputs.version }}
          
          # 新しいタグでプッシュ
          docker push $ECR_REPOSITORY_URI:${{ github.event.inputs.version }}
          
          # latestとしても設定
          docker tag $ECR_REPOSITORY_URI:$SOURCE_TAG $ECR_REPOSITORY_URI:latest
          docker push $ECR_REPOSITORY_URI:latest
          
          echo "Image tagged and pushed: $ECR_REPOSITORY_URI:${{ github.event.inputs.version }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-if-needed
    environment: production

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "ECR_REPOSITORY_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.build-if-needed.outputs.image-tag }}" >> $GITHUB_ENV

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition cicd-sample-task-prod \
            --query "taskDefinition" \
            --output json > task-definition-full.json
          
          # 必要なフィールドのみを抽出（シンプルなバージョン）
          jq '{
            family: .family,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: .containerDefinitions,
            volumes: .volumes,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory
          }' task-definition-full.json > task-definition.json

      - name: Update task definition with new image
        run: |
          # Update the container image in the task definition
          jq --arg IMAGE "$ECR_REPOSITORY_URI:$IMAGE_TAG" \
             --arg VERSION "$IMAGE_TAG" \
             --arg ALLOWED_HOSTS "${{ secrets.ALLOWED_HOSTS }}" \
             '.containerDefinitions[0].image = $IMAGE | .containerDefinitions[0].environment += [{"name": "APP_VERSION", "value": $VERSION}, {"name": "ALLOWED_HOSTS", "value": $ALLOWED_HOSTS}]' \
             task-definition.json > new-task-definition.json
          
          # Register the updated task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)
          
          echo "New task definition registered: $NEW_TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster cicd-sample-cluster-prod \
            --service cicd-sample-service-prod \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster cicd-sample-cluster-prod \
            --services cicd-sample-service-prod

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.BACKEND_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" 